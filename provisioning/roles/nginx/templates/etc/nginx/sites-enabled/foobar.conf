
# Main installation definition
server {
	listen		80;
	server_name	foobar.local;
	root		/var/www/html/foobar

	# The WP Engine standard log format, short, easy to process, has backend info and timings.
	access_log	/var/log/nginx/foobar.access.log	wpengine;
	# The weblogs in Apache Standard format, for users to download.
	access_log	/var/log/nginx/foobar.apachestyle.log	apachestandard;

	# Determine whether this is a known bot
	set $is_bot 0;
	if ( $http_user_agent ~* "bot|facebook|crawler|feed|flipboard|slurp|re[ea]der|spider|scoutjet|ssowl|site24|google|news|pubsub|^expo9|^tzogeoagent|jakarta|teoma|scrap(?:[ey]|ing)|siteimprove|nutch|coccoc|wazzup|genieo|thunderstone" ) {
		set $is_bot 1;
	}

	# Queryargs we don't want to allow (mostly injection-style attacks)
	if ( $args ~* "(?:\<|%3c).*script.*(?:\>|%3e)|\b(?:GLOBALS|_REQUEST|_GET|_POST|_COOKIE)(?:=|\[|\%[0-9A-Z]{0,2})|\bgoogle\.com/humans\.txt" ) {
		return 403;
	}

	# Bots which blast sites and we don't want to allow them.
	if ( $http_user_agent ~* "^\W|^Mozilla(?: |/2|/4\.0\+?\()|^(?:LWP|MSIE|Nut|Omniexpl|Opera/9\.64|pussycat|python|super happy|trackback/|user|website-|winnie)|[\r\n]|psyche|adwords|\bemail|autoemailspider|core-project|diamond|digger|ecollector|forum|^java[/ ]\d\.|Microsoft URL|Missigua|Movable Type|grub|httpproxy|Internet Explorer|isc systems|blogsearch|cherrypicker|maxpoint|casper|boston|feedfinder|cmsworldmap|diavol|dotbot|flicky|ia_archiver|kmccrew|libwww|planetwork|pycurl|skygrid|; Widows|a href|DTS agent|user-agent:|hanzoweb|indy lib|murzillo|\.NET CLR 1\)|POE-Component-Client|turing mach|Ubuntu/9\.25|unspecified\.mail|webaltbot|wise(?:nut)?bot|Windows NT [45]\.[01];\)|Windows XP 5|WordPress/4\.01|discobot|xedant|\\\\" ) {
		return 403;
	}

	# If this is a bot AND the path or query args are such that bots should get a 301 away from
	# this resource, do that immediately.
	set $bot_path "$is_bot$uri";
	if ( $bot_path ~ "^1.*?(?:/page/\d\d+|/attachment/|/search/|/members/[^/]+/activity|/activity/p/)" ) {
		set $args "";
		rewrite ^	/	permanent;
	}
	if ( $bot_path ~ "^1.*?(?:[a-zA-Z](?<!/page)/\d+)/?$" ) {
		rewrite	^(.*)/[^/]+/?$	$1	permanent;
	}
	set $is_bot_ok 0;
	set $bot_ok_regex "$is_bot$is_args$args";
	if ( $bot_ok_regex ~ "^1\?(?:p=\d+|feed=)" ) {
		set $is_bot_ok 1;
	}
	set $is_bot_redirect "$is_bot$is_args$is_bot_ok";
	if ( $is_bot_redirect = "1?0" ) {		# is a bot, but not OK -- redirect without query args
		set $args "";
		rewrite ^	$uri	permanent;
	}

	# Append the rewrite info to the User Agent if it exists
	set $my_ua $http_user_agent;

	# robots.txt is special. If it exists on disk, serve that one directly.
	# Otherwise pass it through to WordPress, via cached in Varnish.
	location = /robots.txt	{
		log_not_found         off;
		if_modified_since     before;
		add_header	      X-Type  "robots";
		add_header	      Cache-Control  "public, max-age=2592000";
		error_page	      403 = @varnishforever;
		error_page	      404 = @varnishforever;
	}

	# Feeds are cached by Varnish.
	location ~ /(?:atom(?:/|\.xml)?(?:/index.php)?|feed(?:/|\.xml|/rss2?\b/?|/rdf/?|/podcast/?)?(?:/index\.php|.+\.xml)?|index\.rdf)$		{
		add_header			X-Type	"feed";
		proxy_set_header	X-Cache-Always	"feed";
		proxy_set_header Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Is-Bot $is_bot;
		proxy_set_header User-Agent $my_ua;
		proxy_pass http://localhost:8081;
	}

	# Serve static files directly; missing files need to hit the backend in case they're
	# created dynamically (i.e. minify) or have a rewrite rule (e.g. Multisite or custom rewrite).
	location ~* ^.+\.(?:jpe?g|gif|png|css|js|ico|zip|7z|tgz|gz|rar|bz2|do[ct][mx]?|xl[ast][bmx]?|exe|pdf|p[op][ast][mx]?|sld[xm]?|thmx?|txt|tar|midi?|wav|bmp|rtf|avi|mp\d|mpg|iso|mov|djvu|dmg|flac|r70|mdf|chm|sisx|sis|flv|thm|bin|swf|cert|otf|ttf|eot|svgx?|woff|jar|class|log|web[ma])$  {
		add_header		X-Type	"static/generic";
		if_modified_since       before;
		add_header		Cache-Control  "public, max-age=2592000";
		add_header		Vary "Accept-Encoding";
		add_header		Access-Control-Allow-Origin *;
	}

	# An internal redirect target for a backend request.
	location @backend {
		add_header		X-Type	"backend";
		proxy_set_header Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Is-Bot $is_bot;
		proxy_set_header User-Agent $my_ua;
		proxy_pass http://localhost:8081;
	}

	# An internal redirect target for varnish-cache using "forever" rules
	location @varnishforever {
		add_header		X-Type	"varnish-forever";
		proxy_set_header	X-Cache-Always	"forever";
		proxy_set_header Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Is-Bot $is_bot;
		proxy_set_header User-Agent $my_ua;
		proxy_pass http://localhost:8081;
	}

	# A rewrite target to use Varnish caching for a small number of hours.
	location /-varnish-hours-	{
		add_header			X-Type	"varnish-hours";
		proxy_set_header	X-Cache-Always	"hours";
		proxy_set_header Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Is-Bot $is_bot;
		proxy_set_header User-Agent $my_ua;
		proxy_pass http://localhost:8081;
	}

	# A rewrite target to use Varnish caching for a very short time and honoring everything else.
	location /-varnish-short-	{
		add_header			X-Type	"varnish-short";
		proxy_set_header	X-Cache-Short	"yes";
		proxy_set_header Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Is-Bot $is_bot;
		proxy_set_header User-Agent $my_ua;
		proxy_pass http://localhost:8081;
	}

	# Default is to send the result to the backend with a
	# standard IP-based rate-limit suitable for public consumption.
	location / {
		add_header		X-Type		"default";
		proxy_set_header Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Is-Bot $is_bot;
		proxy_set_header User-Agent $my_ua;

		# If it's not a GET or HEAD, Varnish isn't going to cache it anyway, so just go straight to Apache.
		if ( $request_method !~* "get|head" ) {
			proxy_pass http://localhost:8082;
		}

		proxy_pass http://localhost:8081;
	}

}

